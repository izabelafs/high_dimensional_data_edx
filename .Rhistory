library(devtools)
library(renv)
install.packages("renv")
library(renv)
renv::activate()
install.packages("devtools")
library(devtools)
install_github("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
data(tissuesGeneExpression)
head(e)
head(tissue)
table(e)
table(tissue)
dist(t(e))
dist <- dist(t(e))
dist[3,45]
dim(dist)
as.matrix(dist)[3,45]
e["210486_at"]
tissue["210486_at"]
e["210486_at"]
dist
as.matrix(dist)
e[210486_at]
e[210486]
as.matrix(dist)[210486,200805]
as.matrix(dist)[200805,210486]
tissue
e
e("210486_at")
rownames(e)
genes <- rownames(e)
genes["210486_at"]
# The data represents RNA expression levels for seven tissues, each with several biological replicates. We call samples that we consider to be from the same population, such as liver tissue from different individuals, biological replicates:
library(tidr)
install.packages("tydr")
install.packages("tidr")
install.packages("dplyr")
# The data represents RNA expression levels for seven tissues, each with several biological replicates. We call samples that we consider to be from the same population, such as liver tissue from different individuals, biological replicates:
library(dplyr)
install.packages("tibble")
# The data represents RNA expression levels for seven tissues, each with several biological replicates. We call samples that we consider to be from the same population, such as liver tissue from different individuals, biological replicates:
library(tibble)
genes <- rownames_to_column(e)
genes <- rownames_to_column(as.data.fraem(e))
genes <- rownames_to_column(as.data.frame(e))
genes["210486_at"]
genes
genes <- as.data.frame(e)
e
genes["210486_at"]
genes["210486_at",]
dim(e)
d = as.matrix(dist(e))
x<-e["210486_at",]
y<-e["200805_at",]
sqrt(crossprod(x-y))
22215*22215
d = dist(t(e))
length(d)
library(GSE5859Subset)
install.packages("GSE5859Subset")
install_github("genomicsclass/GSE5859Subset")
library(GSE5859Subset)
data(GSE5859Subset)
dim(geneExpression)
table(sampleInfo)
summary(sampleInfo)
sampleInfo["CEU"]
sampleInfo
summary(sampleInfo)
geneExpression
summary(geneExpression)
sampleInfo
geneAnnotation
sampleInfo
sampleInfo$ethnicity
d = dist(t(sampleInfo))
dist[3,7]
dist(as.matrix(d))[3,7]
dist(as.matrix(d)[3,7])
as.matrix(d)[3.7]
as.matrix(d)[3,7]
d
d = dist(sampleInfo)
d
as.matrix(d)[3,7]
x <- sampleInfo[3,]
y <- sampleInfo[7,]
x
sqrt(crossprod(x-y))
sampleInfo
View(geneAnnotation)
x <- gene[3,]
x <- geneExpression[3,]
y <- geneExpression[7,]
sqrt(crossprod(x-y))
x <- geneExpression[4,]
y <- geneExpression[14,]
sqrt(crossprod(x-y))
d = dist(t(geneExpression))
d
d[3,7]
d[3,]
d[,]
d[,3]
as.matrix(d)[3,7]
as.matrix(d)[4,14]
column = 1
x = 1:ncol(geneExpression)
dists = sapply(x, function(x){
test = geneExpression[,x]
target = geneExpression[,column]
sqrt(crossprod(target-test))
})
mean(dists)
renv::snapshot()
renv::restore()
library(readxl)
Analisis_Lab_El_tránsito <- read_excel("~/Downloads/Analisis Lab El tránsito.xlsx")
View(Analisis_Lab_El_tránsito)
geneExpression
glimpse(geneExpression)
renv::install("tidyverse")
glimpse(geneExpression)
head(geneExpression)
y = nrow(geneExpression)
y = nrow(geneExpression):1
y = nrow(geneExpression):1
x = 1:ncol(geneExpression)
dists = sapply(x, function(x){
test = geneExpression[,x]
sapply(y, function(y){
target = geneExpression[,y]
sqrt(crossprod(target-test))
})
})
mean(dists)
dists = sapply(x, function(x){
test = geneExpression[,x]
sapply(y, function(y){
target = geneExpression[y,]
sqrt(crossprod(target-test))
})
})
mean(dists)
View(dists)
mean(dists[1,])
mean(dists[2,])
mean(dists[3,])
mean(dists[4,])
mean(dists[45,])
mean(dists[5,])
mean(dists[,1])
mean(dists[,2])
mean(dists[,3])
mean(dists[,4])
mean(dists[,5])
mean(dists[,6])
mean(dists[,7])
mean(dists[,8])
mean(dists[,9])
mean(dists[,10])
mean(dists[,11])
mean(dists[,12])
mean(dists[,13])
mean(dists[,14])
mean(dists[,15])
mean(dists[,16])
mean(dists[,17])
mean(dists[,18])
mean(dists[,19])
mean(dists[,20])
mean(dists[,21])
mean(dists[,22])
mean(dists[,23])
mean(dists[,24])
mean(dists[,25])
x = 1:24
dist = sapply(dists[,x], mean())
dist = sapply(dists[,x], mean())
z = 1:24
dist = sapply(z, function(z){
d = mean(dists[,z])
})
dist
max(dist)
which.max(dist)
max(dists)
dist(geneExpression)
renv::restore()
renv::hydrate()
